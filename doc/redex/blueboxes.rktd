15253
((3) 0 () 11 ((q lib "redex/pict.rkt") (q lib "redex/reduction-semantics.rkt") (q 11716 . 6) (q lib "redex/gui.rkt") (q lib "redex/benchmark.rkt") (q 41343 . 20) (q 17342 . 5) (q 1576 . 5) (q 43631 . 5) (q 44128 . 3) (q 17477 . 5)) () (h ! (equal) ((c form c (c (? . 0) q relation->pict)) q (30980 . 2)) ((c form c (c (? . 0) q with-compound-rewriter)) q (41064 . 4)) ((c def c (c (? . 1) q reduction-relation->rule-names)) q (6969 . 3)) ((c form c (c (? . 1) q with)) q (8288 . 2)) ((c form c (c (? . 1) q term)) q (1970 . 3)) ((c def c (c (? . 0) q curly-quotes-for-strings)) q (38293 . 4)) ((c def c (c (? . 3) q traces)) q (19159 . 45)) ((c def c (c (? . 0) q default-font-size)) q (37629 . 4)) ((c def c (c (? . 0) q metafunction-line-gap-space)) q (39384 . 4)) ((c form c (c (? . 1) q check-metafunction)) q (18157 . 15)) ((c def c (c (? . 1) q plug)) q (2571 . 4)) ((c form c (c (? . 1) q I)) q (11899 . 2)) ((c def c (c (? . 1) q exn:fail:redex:generation-failure?)) q (19082 . 3)) ((c def c (c (? . 1) q relation-coverage)) q (13968 . 4)) ((c def c (c (? . 1) q make-counterexample)) c (? . 6)) ((c def c (c (? . 0) q reduction-relation-rule-extra-separation)) q (37951 . 5)) ((c def c (c (? . 1) q bind?)) c (? . 7)) ((c def c (c (? . 0) q render-lw)) q (42356 . 4)) ((c def c (c (? . 1) q reduction-relation?)) q (7193 . 3)) ((c def c (c (? . 1) q make-immutable-binding-hash)) q (4396 . 4)) ((c def c (c (? . 0) q grammar-style)) q (36314 . 4)) ((c form c (c (? . 1) q redex-check)) q (15868 . 29)) ((c form c (c (? . 1) q define-term)) q (2409 . 2)) ((c def c (c (? . 1) q struct:exn:fail:redex:test)) c (? . 10)) ((c def c (c (? . 1) q derivation?)) c (? . 2)) ((c form c (c (? . 1) q define-union-language)) q (4267 . 5)) ((c def c (c (? . 0) q metafunction-combine-contract-and-rules)) q (39644 . 5)) ((c def c (c (? . 1) q judgment-form?)) q (12211 . 3)) ((c form c (c (? . 1) q define-metafunction)) q (8300 . 33)) ((c def c (c (? . 1) q redex-pseudo-random-generator)) q (18913 . 4)) ((c def c (c (? . 1) q derivation-term)) c (? . 2)) ((c def c (c (? . 0) q just-before)) q (42607 . 4)) ((c def c (c (? . 0) q metafunction-cases)) q (34888 . 11)) ((c form c (c (? . 1) q -->)) q (8264 . 2)) ((c form c (c (? . 1) q define-extended-language)) q (3842 . 11)) ((c def c (c (? . 4) q run-results)) c (? . 8)) ((c def c (c (? . 0) q render-reduction-relation)) q (29731 . 8)) ((c form c (c (? . 0) q render-metafunction)) q (30209 . 3)) ((c def c (c (? . 3) q show-derivations)) q (24542 . 11)) ((c def c (c (? . 1) q default-language)) q (4784 . 4)) ((c def c (c (? . 0) q current-render-pict-adjust)) q (40525 . 4)) ((c form c (c (? . 1) q nothing)) q (3827 . 2)) ((c form c (c (? . 4) q define-rewrite)) q (42958 . 6)) ((c def c (c (? . 0) q rule-pict-info-label)) q (32626 . 3)) ((c def c (c (? . 0) q where-combine)) q (40360 . 4)) ((c def c (c (? . 1) q default-attempt-size)) q (18694 . 3)) ((c def c (c (? . 1) q match-bindings)) q (1511 . 3)) ((c def c (c (? . 1) q language-nts)) q (4648 . 3)) ((c def c (c (? . 0) q lw-metafunction?)) c (? . 5)) ((c form c (c (? . 1) q build-derivations)) q (11667 . 2)) ((c def c (c (? . 1) q default-check-attempts)) q (18776 . 4)) ((c form c (c (? . 1) q test-->>âˆƒ)) q (13208 . 10)) ((c def c (c (? . 0) q fill-between)) q (42810 . 5)) ((c def c (c (? . 4) q struct:bmark-log-data)) c (? . 9)) ((c def c (c (? . 0) q render-language)) q (29293 . 6)) ((c def c (c (? . 3) q term-node-set-position!)) q (26367 . 5)) ((c def c (c (? . 3) q light-pen-color)) q (27504 . 4)) ((c def c (c (? . 0) q rule-pict-info?)) q (32282 . 3)) ((c def c (c (? . 0) q rule-pict-info-arrow)) q (32340 . 3)) ((c def c (c (? . 0) q lw-column-span)) c (? . 5)) ((c form c (c (? . 0) q render-relation)) q (30780 . 2)) ((c form c (c (? . 1) q test-judgment-holds)) q (13561 . 2)) ((c def c (c (? . 0) q label-style)) q (36213 . 4)) ((c def c (c (? . 0) q relation-clauses-combine)) q (39840 . 5)) ((c form c (c (? . 0) q judgment-form->pict)) q (31019 . 2)) ((c def c (c (? . 3) q term-node-children)) q (25732 . 3)) ((c form c (c (? . 0) q metafunction->pict)) q (30663 . 2)) ((c def c (c (? . 0) q set-lw-metafunction?!)) c (? . 5)) ((c form c (c (? . 4) q define-rewrite/compose)) q (43113 . 2)) ((c def c (c (? . 3) q initial-char-width)) q (27025 . 4)) ((c def c (c (? . 0) q struct:lw)) c (? . 5)) ((c def c (c (? . 0) q rule-pict-info-computed-label)) q (32736 . 4)) ((c def c (c (? . 0) q lw->pict)) q (42482 . 4)) ((c def c (c (? . 1) q counterexample-term)) c (? . 6)) ((c def c (c (? . 0) q set-lw-unq?!)) c (? . 5)) ((c def c (c (? . 1) q bind-name)) c (? . 7)) ((c def c (c (? . 0) q reduction-relation->pict)) q (30054 . 4)) ((c def c (c (? . 3) q term-node-expr)) q (26308 . 3)) ((c def c (c (? . 0) q rule-pict-info-lhs)) q (32438 . 3)) ((c def c (c (? . 0) q set-lw-line!)) c (? . 5)) ((c def c (c (? . 1) q apply-reduction-relation*)) q (7617 . 12)) ((c def c (c (? . 0) q lw-unq?)) c (? . 5)) ((c form c (c (? . 1) q redex-match?)) q (1386 . 3)) ((c def c (c (? . 0) q reduction-relation-rule-separation)) q (37792 . 4)) ((c def c (c (? . 3) q term-node-set-color!)) q (25983 . 4)) ((c def c (c (? . 1) q set-cache-size!)) q (1792 . 3)) ((c def c (c (? . 4) q run-results-time)) c (? . 8)) ((c def c (c (? . 0) q extend-language-show-extended-order)) q (31465 . 4)) ((c def c (c (? . 0) q term->pict/pretty-write)) q (28984 . 8)) ((c form c (c (? . 1) q fresh)) q (8275 . 2)) ((c def c (c (? . 3) q dark-brush-color)) q (27345 . 4)) ((c def c (c (? . 1) q variables-not-in)) q (2750 . 4)) ((c form c (c (? . 1) q hole)) q (2020 . 2)) ((c def c (c (? . 0) q lw-column)) c (? . 5)) ((c def c (c (? . 0) q metafunction-fill-acceptable-width)) q (39511 . 4)) ((c def c (c (? . 0) q lw-line)) c (? . 5)) ((c form c (c (? . 1) q compatible-closure)) q (7065 . 2)) ((c def c (c (? . 1) q counterexample)) c (? . 6)) ((c def c (c (? . 0) q lw)) c (? . 5)) ((c def c (c (? . 1) q IO-judgment-form?)) q (12268 . 3)) ((c def c (c (? . 3) q light-brush-color)) q (27661 . 4)) ((c def c (c (? . 0) q render-reduction-relation-rules)) q (31616 . 11)) ((c def c (c (? . 4) q bmark-log-data)) c (? . 9)) ((c def c (c (? . 3) q stepper)) q (23952 . 7)) ((c def c (c (? . 1) q current-traced-metafunctions)) q (12328 . 4)) ((c def c (c (? . 4) q bmark-log-directory)) q (44294 . 6)) ((c def c (c (? . 0) q set-lw-column!)) c (? . 5)) ((c form c (c (? . 1) q redex-let)) q (2266 . 2)) ((c def c (c (? . 0) q rule-pict-style)) q (32112 . 4)) ((c def c (c (? . 3) q traces/ps)) q (21530 . 45)) ((c def c (c (? . 1) q check-redundancy)) q (1865 . 4)) ((c def c (c (? . 0) q set-lw-e!)) c (? . 5)) ((c def c (c (? . 1) q struct:bind)) c (? . 7)) ((q def ((lib "redex/benchmark/models/all-info.rkt") all-mods)) q (44531 . 3)) ((c def c (c (? . 0) q set-lw-column-span!)) c (? . 5)) ((c def c (c (? . 1) q match?)) q (1458 . 3)) ((c def c (c (? . 0) q build-lw)) q (41928 . 10)) ((c form c (c (? . 0) q render-judgment-form)) q (30870 . 2)) ((c def c (c (? . 1) q derivation-name)) c (? . 2)) ((c def c (c (? . 4) q run-results-cexps)) c (? . 8)) ((c form c (c (? . 1) q reduction-relation)) q (5181 . 43)) ((c def c (c (? . 0) q reduction-relation-rule-line-separation)) q (38123 . 5)) ((c def c (c (? . 3) q default-pretty-printer)) q (28279 . 6)) ((c form c (c (? . 0) q with-atomic-rewriters)) q (40918 . 3)) ((c form c (c (? . 1) q check-reduction-relation)) q (17648 . 15)) ((c def c (c (? . 0) q to-lw/stx)) q (42303 . 3)) ((c form c (c (? . 1) q define-metafunction/extension)) q (9614 . 5)) ((c form c (c (? . 0) q render-metafunctions)) q (30340 . 10)) ((c def c (c (? . 3) q term-node-labels)) q (25891 . 3)) ((c def c (c (? . 4) q run-gen-and-check/mods)) q (43770 . 9)) ((c def c (c (? . 3) q term-node-color)) q (26115 . 3)) ((c def c (c (? . 0) q arrow->pict)) q (38571 . 3)) ((c def c (c (? . 3) q stepper/seed)) q (24228 . 7)) ((c form c (c (? . 1) q test-predicate)) q (13634 . 2)) ((c def c (c (? . 0) q lw-line-span)) c (? . 5)) ((c def c (c (? . 1) q exn:fail:redex:test)) c (? . 10)) ((c def c (c (? . 3) q reduction-steps-cutoff)) q (26809 . 4)) ((c def c (c (? . 1) q bind-exp)) c (? . 7)) ((c def c (c (? . 0) q metafunction-style)) q (36625 . 4)) ((c def c (c (? . 1) q variable-not-in)) q (2662 . 4)) ((c def c (c (? . 0) q homemade-white-square-bracket)) q (34449 . 3)) ((c form c (c (? . 1) q in-domain?)) q (9756 . 2)) ((c def c (c (? . 1) q apply-reduction-relation/tag-with-names)) q (7389 . 6)) ((c form c (c (? . 1) q test-equal)) q (12531 . 7)) ((c form c (c (? . 1) q test-->)) q (12957 . 9)) ((c def c (c (? . 0) q linebreaks)) q (34608 . 4)) ((c form c (c (? . 0) q term->pict)) q (28522 . 2)) ((c def c (c (? . 0) q rule-pict-info-rhs)) q (32532 . 3)) ((c form c (c (? . 1) q substitute)) q (5132 . 2)) ((c form c (c (? . 1) q define-extended-judgment-form)) q (11327 . 6)) ((c form c (c (? . 1) q term-match)) q (2448 . 2)) ((c form c (c (? . 1) q test-->>E)) q (13544 . 2)) ((c def c (c (? . 3) q pretty-print-parameters)) q (28138 . 4)) ((c form c (c (? . 1) q redex-match)) q (1310 . 3)) ((c def c (c (? . 0) q metafunction-up/down-indent)) q (34018 . 4)) ((c def c (c (? . 0) q set-lw-line-span!)) c (? . 5)) ((c def c (c (? . 1) q exn:fail:redex:test?)) c (? . 10)) ((c form c (c (? . 1) q context-closure)) q (7133 . 2)) ((c def c (c (? . 1) q depth-dependent-order?)) q (16950 . 5)) ((c def c (c (? . 0) q extend-language-show-union)) q (31342 . 4)) ((c def c (c (? . 0) q make-lw)) c (? . 5)) ((c def c (c (? . 0) q where-make-prefix-pict)) q (40197 . 4)) ((c def c (c (? . 1) q make-derivation)) c (? . 2)) ((c form c (c (? . 0) q to-lw)) q (42283 . 2)) ((c def c (c (? . 1) q coverage?)) q (13916 . 3)) ((c def c (c (? . 1) q alpha-equivalent?)) q (4931 . 8)) ((c form c (c (? . 1) q extend-reduction-relation)) q (6795 . 2)) ((c def c (c (? . 3) q light-text-color)) q (27979 . 4)) ((c form c (c (? . 1) q judgment-holds)) q (11459 . 6)) ((c form c (c (? . 1) q in-hole)) q (2032 . 2)) ((c def c (c (? . 1) q exn:fail:redex:test-source)) c (? . 10)) ((c def c (c (? . 1) q current-cache-all?)) q (8147 . 4)) ((c form c (c (? . 0) q with-compound-rewriters)) q (41221 . 3)) ((c def c (c (? . 1) q test-results)) q (13665 . 2)) ((c form c (c (? . 1) q shadow)) q (3813 . 2)) ((c def c (c (? . 0) q set-arrow-pict!)) q (38632 . 4)) ((c def c (c (? . 0) q render-term/pretty-write)) q (28554 . 10)) ((c def c (c (? . 1) q make-exn:fail:redex:test)) c (? . 10)) ((c def c (c (? . 3) q derivation/ps)) q (25121 . 13)) ((c form c (c (? . 1) q define-relation)) q (11917 . 10)) ((c def c (c (? . 3) q term-node?)) q (26756 . 3)) ((c def c (c (? . 3) q term-node-parents)) q (25812 . 3)) ((c def c (c (? . 1) q make-binding-hash)) q (4527 . 4)) ((c def c (c (? . 1) q make-bind)) c (? . 7)) ((c form c (c (? . 1) q define-judgment-form)) q (9808 . 51)) ((c form c (c (? . 0) q metafunctions->pict)) q (30727 . 2)) ((c def c (c (? . 1) q covered-cases)) q (14099 . 3)) ((c def c (c (? . 1) q apply-reduction-relation)) q (7255 . 4)) ((c form c (c (? . 0) q with-atomic-rewriter)) q (40745 . 4)) ((c form c (c (? . 1) q test-->>)) q (12660 . 11)) ((c def c (c (? . 1) q bind)) c (? . 7)) ((c def c (c (? . 1) q counterexample?)) c (? . 6)) ((c def c (c (? . 1) q compiled-lang?)) q (4727 . 3)) ((c def c (c (? . 0) q non-terminal-style)) q (36740 . 4)) ((c def c (c (? . 4) q bmark-log-data-data)) c (? . 9)) ((c def c (c (? . 0) q just-after)) q (42709 . 4)) ((c def c (c (? . 3) q dark-text-color)) q (27822 . 4)) ((c form c (c (? . 1) q redex-generator)) q (17132 . 7)) ((c def c (c (? . 0) q paren-style)) q (36419 . 4)) ((c def c (c (? . 4) q run-results-tries)) c (? . 8)) ((c form c (c (? . 0) q with-unquote-rewriter)) q (40696 . 2)) ((c def c (c (? . 0) q render-language-nts)) q (31068 . 4)) ((c def c (c (? . 0) q white-square-bracket)) q (34272 . 4)) ((c form c (c (? . 1) q redex-index)) q (15822 . 2)) ((c def c (c (? . 0) q metafunction-pict-style)) q (33282 . 17)) ((c def c (c (? . 0) q reduction-rule-style/c)) q (32241 . 2)) ((c def c (c (? . 0) q non-terminal-superscript-style)) q (36990 . 4)) ((c form c (c (? . 1) q term-let)) q (2063 . 8)) ((c form c (c (? . 1) q define-language)) q (2913 . 23)) ((c def c (c (? . 4) q run-results?)) c (? . 8)) ((c form c (c (? . 1) q O)) q (11908 . 2)) ((c def c (c (? . 4) q bmark-log-data?)) c (? . 9)) ((c form c (c (? . 1) q redex-enum)) q (15783 . 2)) ((c def c (c (? . 0) q horizontal-bar-spacing)) q (38958 . 5)) ((c def c (c (? . 0) q non-terminal-subscript-style)) q (36855 . 4)) ((c def c (c (? . 1) q default-equiv)) q (13698 . 4)) ((c form c (c (? . 4) q include/rewrite)) q (43161 . 2)) ((c def c (c (? . 0) q language->pict)) q (29550 . 5)) ((c def c (c (? . 0) q current-text)) q (38408 . 4)) ((c def c (c (? . 0) q default-white-square-bracket)) q (34529 . 3)) ((c def c (c (? . 4) q benchmark-logging-to)) q (44185 . 4)) ((c def c (c (? . 0) q metafunction-gap-space)) q (39140 . 4)) ((c def c (c (? . 1) q exn:fail:redex?)) q (2855 . 3)) ((c form c (c (? . 1) q redex-let*)) q (2337 . 2)) ((c form c (c (? . 0) q render-term)) q (28457 . 3)) ((c def c (c (? . 0) q label-font-size)) q (37234 . 4)) ((c def c (c (? . 1) q derivation)) c (? . 2)) ((c def c (c (? . 3) q term-node-height)) q (26693 . 3)) ((c def c (c (? . 4) q struct:run-results)) c (? . 8)) ((c def c (c (? . 0) q sc-linebreaks)) q (34745 . 4)) ((c def c (c (? . 1) q struct:derivation)) c (? . 2)) ((c def c (c (? . 0) q rule-pict-info->side-condition-pict)) q (32854 . 5)) ((c def c (c (? . 3) q term-node-set-red!)) q (26215 . 4)) ((c def c (c (? . 0) q lw?)) c (? . 5)) ((c def c (c (? . 1) q caching-enabled?)) q (1693 . 4)) ((c def c (c (? . 0) q arrow-space)) q (33064 . 4)) ((c def c (c (? . 1) q exn:fail:redex:test-term)) c (? . 10)) ((c form c (c (? . 1) q generate-term)) q (14196 . 35)) ((c def c (c (? . 0) q judgment-form-show-rule-names)) q (36062 . 4)) ((c def c (c (? . 1) q derivation-subs)) c (? . 2)) ((c form c (c (? . 1) q make-coverage)) q (13829 . 5)) ((c def c (c (? . 3) q initial-font-size)) q (26924 . 4)) ((c form c (c (? . 1) q ::=)) q (3802 . 2)) ((c form c (c (? . 1) q mf-apply)) q (2047 . 2)) ((c def c (c (? . 1) q struct:counterexample)) c (? . 6)) ((c def c (c (? . 0) q non-terminal-gap-space)) q (31225 . 4)) ((c def c (c (? . 0) q judgment-form-cases)) q (35500 . 11)) ((c def c (c (? . 0) q delimit-ellipsis-arguments?)) q (34147 . 4)) ((c def c (c (? . 0) q label-space)) q (33173 . 4)) ((c form c (c (? . 1) q term-match/single)) q (2506 . 2)) ((c def c (c (? . 0) q metafunction-font-size)) q (37393 . 6)) ((c def c (c (? . 3) q term-node-y)) q (26573 . 3)) ((c def c (c (? . 0) q lw-e)) c (? . 5)) ((c def c (c (? . 0) q metafunction-rule-gap-space)) q (39257 . 4)) ((c def c (c (? . 0) q metafunction-arrow-pict)) q (40034 . 4)) ((c def c (c (? . 3) q term-node-x)) q (26515 . 3)) ((c def c (c (? . 0) q white-bracket-sizing)) q (38728 . 5)) ((c def c (c (? . 3) q term-node-width)) q (26631 . 3)) ((c def c (c (? . 3) q dark-pen-color)) q (27190 . 4)) ((c def c (c (? . 1) q union-reduction-relations)) q (6871 . 3)) ((c def c (c (? . 4) q run-gen-and-check)) q (43217 . 11)) ((c def c (c (? . 0) q literal-style)) q (36520 . 4)) ((c def c (c (? . 0) q default-style)) q (37129 . 4))))

Goals
â€” abstract syntax
â€” notions of reduction, substitution
â€” reductions and calculations
â€” semantics
â€” standard reduction
â€” abstract register machines
â€” types

Goals
â€” Redex versus Racket
â€” define languages
â€” develop metafunctions, includes basic testing, submodules
â€” extend languages
â€” generalizing with any

Goals
â€” developing meta-functions
â€” discovering Redex patterns

Goals
â€” extend languages with concepts needed for reduction relations
â€” developing reduction relations
â€” defining a semantics
â€” testing against a language

Goals
â€” developing reductions
â€” semantics

Goals
â€” typed languages
â€” developing type judgments
â€” subject reduction

Goals
â€” subject reduction testing with trace
â€” typing judgments

Goals
â€” revise the language for assignment statements
â€” a standard reduction system for expression-store tuples
â€” revise the language for raising exceptions
â€” a general reduction system for exceptions

Goals
â€” develop a general reduction system for Lambda with assignments
â€” develop a standard reduction system for Lambda with exceptions

Goals
â€” why these three machines: CC machine, CK machine, CEK machine
â€” theorems connecting the machines, theorems for debugging
â€” equivalence theorems

Goals
â€” develop the CESK machine
è¯­æ³•
(redex-matchÂ langÂ patternÂ term-expr)
(redex-matchÂ langÂ pattern)
è¯­æ³•
(redex-match?Â langÂ patternÂ any)
(redex-match?Â langÂ pattern)
å‡½æ•°
(match?Â val)Â ->Â boolean?
Â Â valÂ :Â any/c
å‡½æ•°
(match-bindingsÂ m)Â ->Â (listofÂ bind?)
Â Â mÂ :Â match?
struct
(structÂ bindÂ (name exp)
Â Â Â Â #:extra-constructor-nameÂ make-bind)
Â Â nameÂ :Â symbol?
Â Â expÂ :Â any/c
parameter
(caching-enabled?)Â ->Â boolean?
(caching-enabled?Â on?)Â ->Â void?
Â Â on?Â :Â boolean?
å‡½æ•°
(set-cache-size!Â size)Â ->Â void?
Â Â sizeÂ :Â positive-integer?
parameter
(check-redundancy)Â ->Â boolean?
(check-redundancyÂ check?)Â ->Â void?
Â Â check?Â :Â boolean?
è¯­æ³•
(termÂ term)
(termÂ termÂ #:langÂ lang-id)
è¯­æ³•
hole
è¯­æ³•
in-hole
è¯­æ³•
mf-apply
è¯­æ³•
(term-letÂ ([tl-patÂ expr]Â ...)Â body)
Â 
    tl-patÂ =Â identifier
         Â Â |Â (tl-pat-eleÂ ...)
         Â Â Â Â Â 
tl-pat-eleÂ =Â tl-pat
         Â Â |Â tl-patÂ ...Â ;Â a literal ellipsis
è¯­æ³•
(redex-letÂ languageÂ ([patternÂ expression]Â ...)Â bodyÂ ...+)
è¯­æ³•
(redex-let*Â languageÂ ([patternÂ expression]Â ...)Â bodyÂ ...+)
è¯­æ³•
(define-termÂ identifierÂ term)
è¯­æ³•
(term-matchÂ languageÂ [patternÂ expression]Â ...)
è¯­æ³•
(term-match/singleÂ languageÂ [patternÂ expression]Â ...)
å‡½æ•°
(plugÂ contextÂ expression)Â ->Â any
Â Â contextÂ :Â any/c
Â Â expressionÂ :Â any/c
å‡½æ•°
(variable-not-inÂ tÂ prefix)Â ->Â symbol?
Â Â tÂ :Â any/c
Â Â prefixÂ :Â symbol?
å‡½æ•°
(variables-not-inÂ tÂ vars)Â ->Â (listofÂ symbol?)
Â Â tÂ :Â any/c
Â Â varsÂ :Â (listofÂ symbol?)
å‡½æ•°
(exn:fail:redex?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
è¯­æ³•
(define-languageÂ lang-name
Â Â non-terminal-defÂ ...
Â Â maybe-binding-spec)
Â 
  non-terminal-defÂ =Â (non-terminal-nameÂ ...+Â ::=Â patternÂ ...+)
                 Â Â |Â (non-terminal-nameÂ patternÂ ...+)
                 Â Â |Â ((non-terminal-nameÂ ...+)Â patternÂ ...+)
                 Â Â Â Â Â 
maybe-binding-specÂ =Â 
                 Â Â |Â #:binding-formsÂ binding-patternÂ ...
                 Â Â Â Â Â 
   binding-patternÂ =Â pattern
                 Â Â |Â binding-patternÂ #:exportsÂ beta
                 Â Â |Â binding-patternÂ #:refers-toÂ beta
                 Â Â |Â binding-patternÂ #:...bindÂ (idÂ betaÂ beta)
                 Â Â Â Â Â 
              betaÂ =Â nothing
                 Â Â |Â symbol
                 Â Â |Â (shadowÂ beta-sequenceÂ ...)
                 Â Â Â Â Â 
     beta-sequenceÂ =Â beta
                 Â Â |Â ...Â ;Â literal ellipsis
è¯­æ³•
::=
è¯­æ³•
shadow
è¯­æ³•
nothing
è¯­æ³•
(define-extended-languageÂ extended-langÂ base-lang
Â Â non-terminal-defÂ ...
Â Â maybe-binding-spec)
Â 
  non-terminal-defÂ =Â (non-terminal-nameÂ ...+Â ::=Â patternÂ ...+)
                 Â Â |Â (non-terminal-nameÂ patternÂ ...+)
                 Â Â |Â ((non-terminal-nameÂ ...+)Â patternÂ ...+)
                 Â Â Â Â Â 
maybe-binding-specÂ =Â 
                 Â Â |Â #:binding-formsÂ binding-declarationÂ ...
è¯­æ³•
(define-union-languageÂ LÂ base/prefix-langÂ ...)
Â 
base/prefix-langÂ =Â lang-id
               Â Â |Â (prefixÂ lang-id)
å‡½æ•°
(make-immutable-binding-hashÂ langÂ [assocs])Â ->Â dict?
Â Â langÂ :Â compiled-lang?
Â Â assocsÂ :Â (listofÂ pair?)Â =Â '()
å‡½æ•°
(make-binding-hashÂ langÂ [assocs])Â ->Â dict?
Â Â langÂ :Â compiled-lang?
Â Â assocsÂ :Â (listofÂ pair?)Â =Â '()
å‡½æ•°
(language-ntsÂ lang)Â ->Â (listofÂ symbol?)
Â Â langÂ :Â compiled-lang?
å‡½æ•°
(compiled-lang?Â l)Â ->Â boolean?
Â Â lÂ :Â any/c
parameter
(default-language)Â ->Â (or/cÂ false/cÂ compiled-lang?)
(default-languageÂ lang)Â ->Â void?
Â Â langÂ :Â (or/cÂ false/cÂ compiled-lang?)
å‡½æ•°
(alpha-equivalent?Â langÂ lhsÂ rhs)Â ->Â boolean?
Â Â langÂ :Â compiled-lang?
Â Â lhsÂ :Â any/c
Â Â rhsÂ :Â any/c
(alpha-equivalent?Â lhsÂ rhs)Â ->Â boolean?
Â Â lhsÂ :Â any/c
Â Â rhsÂ :Â any/c
metafunction
(substituteÂ valÂ old-varÂ new-val)
è¯­æ³•
(reduction-relationÂ languageÂ domainÂ codomainÂ base-arrow
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â reduction-caseÂ ...
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â shortcuts)
Â 
        domainÂ =Â 
             Â Â |Â #:domainÂ pattern
             Â Â Â Â Â 
      codomainÂ =Â 
             Â Â |Â #:codomainÂ pattern
             Â Â Â Â Â 
    base-arrowÂ =Â 
             Â Â |Â #:arrowÂ base-arrow-name
             Â Â Â Â Â 
reduction-caseÂ =Â (arrow-nameÂ patternÂ termÂ red-extrasÂ ...)
             Â Â Â Â Â 
    red-extrasÂ =Â rule-name
             Â Â |Â (freshÂ fresh-clauseÂ ...)
             Â Â |Â (side-conditionÂ racket-expression)
             Â Â |Â (whereÂ patternÂ term)
             Â Â |Â (where/hiddenÂ patternÂ term)
             Â Â |Â (where/errorÂ patternÂ term)
             Â Â |Â (bindÂ patternÂ term)
             Â Â |Â (bind/hiddenÂ patternÂ term)
             Â Â |Â (judgment-holdsÂ (judgment-form-idÂ pat/termÂ ...))
             Â Â |Â (judgment-holdsÂ (relation-idÂ termÂ ...))
             Â Â |Â (side-condition/hiddenÂ racket-expression)
             Â Â Â Â Â 
     shortcutsÂ =Â 
             Â Â |Â withÂ shortcutÂ ...
             Â Â Â Â Â 
      shortcutÂ =Â [(old-arrow-nameÂ patternÂ term)
                 Â (new-arrow-nameÂ identifierÂ identifier)]
             Â Â Â Â Â 
     rule-nameÂ =Â identifier
             Â Â |Â string
             Â Â |Â (computed-nameÂ racket-expression)
             Â Â Â Â Â 
  fresh-clauseÂ =Â var
             Â Â |Â ((var1Â ...)Â (var2Â ...))
             Â Â Â Â Â 
      pat/termÂ =Â pattern
             Â Â |Â term
è¯­æ³•
(extend-reduction-relationÂ reduction-relationÂ languageÂ moreÂ ...)
å‡½æ•°
(union-reduction-relationsÂ rÂ ...)Â ->Â reduction-relation?
Â Â rÂ :Â reduction-relation?
å‡½æ•°
(reduction-relation->rule-namesÂ r)Â ->Â (listofÂ symbol?)
Â Â rÂ :Â reduction-relation?
è¯­æ³•
(compatible-closureÂ reduction-relationÂ langÂ non-terminal)
è¯­æ³•
(context-closureÂ reduction-relationÂ langÂ pattern)
å‡½æ•°
(reduction-relation?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
å‡½æ•°
(apply-reduction-relationÂ rÂ t)Â ->Â (listofÂ any/c)
Â Â rÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â tÂ :Â any/c
å‡½æ•°
(apply-reduction-relation/tag-with-namesÂ r Â 
Â                                        Â t)Â 
Â ->Â (listofÂ (list/cÂ (or/cÂ #fÂ string?)Â any/c))
Â Â rÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â tÂ :Â any/c
å‡½æ•°
(apply-reduction-relation*Â  r                      Â 
Â                          Â  t                      Â 
Â                          Â [#:all?Â all             Â 
Â                          Â  #:cache-all?Â cache-all?Â 
Â                          Â  #:stop-whenÂ stop-when])Â 
Â ->Â (listofÂ any/c)
Â Â rÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â tÂ :Â any/c
Â Â allÂ :Â boolean?Â =Â #f
Â Â cache-all?Â :Â boolean?Â =Â (orÂ all?Â (current-cache-all?))
Â Â stop-whenÂ :Â (->Â any/cÂ any)Â =Â (Î»Â (x)Â #f)
parameter
(current-cache-all?)Â ->Â boolean?
(current-cache-all?Â cache-all?)Â ->Â void?
Â Â cache-all?Â :Â boolean?
è¯­æ³•
-->
è¯­æ³•
fresh
è¯­æ³•
with
è¯­æ³•
(define-metafunctionÂ language
Â Â metafunction-contract
Â Â [(nameÂ patternÂ ...)Â termÂ metafunction-extrasÂ ...]
Â Â ...)
Â 
metafunction-contractÂ =Â 
                    Â Â |Â idÂ :Â pattern-sequenceÂ ...Â ->Â range
                        maybe-pre-condition
                        maybe-post-condition
                    Â Â Â Â Â 
  maybe-pre-conditionÂ =Â #:preÂ term
                    Â Â |Â 
                    Â Â Â Â Â 
 maybe-post-conditionÂ =Â #:postÂ term
                    Â Â |Â 
                    Â Â Â Â Â 
                rangeÂ =Â pattern
                    Â Â |Â patternÂ orÂ range
                    Â Â |Â patternÂ âˆ¨Â range
                    Â Â |Â patternÂ âˆªÂ range
                    Â Â Â Â Â 
  metafunction-extrasÂ =Â (side-conditionÂ racket-expression)
                    Â Â |Â (side-condition/hiddenÂ racket-expression)
                    Â Â |Â (whereÂ patÂ term)
                    Â Â |Â (where/hiddenÂ patÂ term)
                    Â Â |Â (where/errorÂ patÂ term)
                    Â Â |Â (judgment-holds
                        Â (judgment-form-idÂ pat/termÂ ...))
                    Â Â |Â (judgment-holds
                        Â (relation-idÂ termÂ ...))
                    Â Â |Â (clause-nameÂ name)
                    Â Â |Â orÂ term
è¯­æ³•
(define-metafunction/extensionÂ fÂ language
Â Â metafunction-contract
Â Â [(gÂ patternÂ ...)Â termÂ metafunction-extrasÂ ...]
Â Â ...)
è¯­æ³•
(in-domain?Â (metafunction-nameÂ termÂ ...))
è¯­æ³•
(define-judgment-formÂ language
Â Â mode-spec
Â Â contract-spec
Â Â invariant-spec
Â Â ruleÂ ruleÂ ...)
Â 
     mode-specÂ =Â #:modeÂ (form-idÂ pos-useÂ ...)
             Â Â Â Â Â 
 contract-specÂ =Â 
             Â Â |Â #:contractÂ (form-idÂ pattern-sequenceÂ ...)
             Â Â Â Â Â 
invariant-specÂ =Â #:invÂ term
             Â Â |Â 
             Â Â Â Â Â 
       pos-useÂ =Â I
             Â Â |Â O
             Â Â Â Â Â 
          ruleÂ =Â [premise
                 Â ...
                 Â dashesÂ rule-name
                 Â conclusion]
             Â Â |Â [conclusion
                 Â premise
                 Â ...
                 Â rule-name]
             Â Â Â Â Â 
    conclusionÂ =Â (form-idÂ pat/termÂ ...)
             Â Â Â Â Â 
       premiseÂ =Â (judgment-form-idÂ pat/termÂ ...)Â maybe-ellipsis
             Â Â |Â (relation-idÂ pat/termÂ ...)Â maybe-ellipsis
             Â Â |Â (whereÂ patternÂ term)
             Â Â |Â (where/hiddenÂ patternÂ term)
             Â Â |Â (where/errorÂ patternÂ term)
             Â Â |Â (side-conditionÂ term)
             Â Â |Â (side-condition/hiddenÂ term)
             Â Â Â Â Â 
     rule-nameÂ =Â 
             Â Â |Â string
             Â Â |Â non-ellipsis-non-dashes-var
             Â Â Â Â Â 
      pat/termÂ =Â pattern
             Â Â |Â term
             Â Â Â Â Â 
maybe-ellipsisÂ =Â 
             Â Â |Â ...
             Â Â Â Â Â 
        dashesÂ =Â ---
             Â Â |Â ----
             Â Â |Â -----
             Â Â |Â etc.
è¯­æ³•
(define-extended-judgment-formÂ languageÂ judgment-form-id
Â Â mode-spec
Â Â contract-spec
Â Â invariant-spec
Â Â ruleÂ ...)
è¯­æ³•
(judgment-holdsÂ judgment-or-relation)
(judgment-holdsÂ judgment-or-relationÂ term)
Â 
judgment-or-relationÂ =Â (judgment-form-idÂ pat/termÂ ...)
                   Â Â |Â (relation-idÂ pat/termÂ ...)
è¯­æ³•
(build-derivationsÂ judgment-or-relation)
struct
(structÂ derivationÂ (term name subs)
Â Â Â Â #:extra-constructor-nameÂ make-derivation)
Â Â termÂ :Â any/c
Â Â nameÂ :Â (or/cÂ string?Â #f)
Â Â subsÂ :Â (listofÂ derivation?)
è¯­æ³•
I
è¯­æ³•
O
è¯­æ³•
(define-relationÂ language
Â Â relation-contract
Â Â [(nameÂ patternÂ ...)
Â Â Â termÂ ...
Â Â Â metafunction-extrasÂ ...]Â ...)
Â 
relation-contractÂ =Â 
                Â Â |Â form-idÂ âŠ‚Â patternÂ xÂ ...Â xÂ pattern
                Â Â |Â form-idÂ âŠ†Â patternÂ Ã—Â ...Â Ã—Â pattern
å‡½æ•°
(judgment-form?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
å‡½æ•°
(IO-judgment-form?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(current-traced-metafunctions)Â ->Â (or/cÂ 'allÂ (listofÂ symbol?))
(current-traced-metafunctionsÂ traced-metafunctions)Â ->Â void?
Â Â traced-metafunctionsÂ :Â (or/cÂ 'allÂ (listofÂ symbol?))
è¯­æ³•
(test-equalÂ e1Â e2Â option)
Â 
optionÂ =Â #:equivÂ pred-expr
     Â Â |Â 
Â 
Â Â pred-exprÂ :Â (->Â any/cÂ any/cÂ any/c)
è¯­æ³•
(test-->>Â rel-exprÂ optionÂ ...Â e1-exprÂ e2-exprÂ ...)
Â 
optionÂ =Â #:cycles-ok
     Â Â |Â #:equivÂ pred-expr
     Â Â |Â #:predÂ pred-expr
Â 
Â Â rel-exprÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â pred-exprÂ :Â (->Â any/cÂ any)
Â Â e1-exprÂ :Â any/c
Â Â e2-exprÂ :Â any/c
è¯­æ³•
(test-->Â rel-exprÂ optionÂ ...Â e1-exprÂ e2-exprÂ ...)
Â 
optionÂ =Â #:equivÂ pred-expr
Â 
Â Â rel-exprÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â pred-exprÂ :Â (->Â any/cÂ any/cÂ any/c)
Â Â e1-exprÂ :Â any/c
Â Â e2-exprÂ :Â any/c
è¯­æ³•
(test-->>âˆƒÂ optionÂ ...Â rel-exprÂ start-exprÂ goal-expr)
Â 
optionÂ =Â #:stepsÂ steps-expr
Â 
Â Â rel-exprÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â start-exprÂ :Â any/c
Â Â goal-exprÂ :Â (or/cÂ (->Â any/cÂ any/c)
              Â Â Â Â Â Â (not/cÂ procedure?))
Â Â steps-exprÂ :Â (or/cÂ natural-number/cÂ +inf.0)
è¯­æ³•
test-->>E
è¯­æ³•
(test-judgment-holdsÂ (judgment-form-or-relationÂ pat/termÂ ...))
è¯­æ³•
(test-predicateÂ p?Â e)
å‡½æ•°
(test-results)Â ->Â void?
parameter
(default-equiv)Â ->Â (->Â any/cÂ any/cÂ any/c)
(default-equivÂ equiv)Â ->Â void?
Â Â equivÂ :Â (->Â any/cÂ any/cÂ any/c)
è¯­æ³•
(make-coverageÂ subject)
Â 
subjectÂ =Â metafunction
      Â Â |Â relation-expr
å‡½æ•°
(coverage?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(relation-coverage)Â ->Â (listofÂ coverage?)
(relation-coverageÂ tracked)Â ->Â void?
Â Â trackedÂ :Â (listofÂ coverage?)
å‡½æ•°
(covered-casesÂ c)Â ->Â (listofÂ (cons/cÂ string?Â natural-number/c))
Â Â cÂ :Â coverage?
è¯­æ³•
(generate-termÂ from-pattern)
(generate-termÂ from-judgment-form)
(generate-termÂ from-metafunction)
(generate-termÂ from-reduction-relation)
Â 
           from-patternÂ =Â languageÂ patternÂ size-exprÂ kw-argsÂ ...
                      Â Â |Â languageÂ pattern
                      Â Â |Â languageÂ patternÂ #:i-thÂ index-expr
                      Â Â |Â languageÂ patternÂ #:i-th
                      Â Â Â Â Â 
     from-judgment-formÂ =Â languageÂ #:satisfying
                          (judgment-form-idÂ patternÂ ...)
                      Â Â |Â languageÂ #:satisfying
                          (judgment-form-idÂ patternÂ ...)
                          size-expr
                      Â Â Â Â Â 
      from-metafunctionÂ =Â languageÂ #:satisfying
                          (metafunction-idÂ patternÂ ...)Â =Â pattern
                      Â Â |Â languageÂ #:satisfying
                          (metafunction-idÂ patternÂ ...)Â =Â pattern
                          size-expr
                      Â Â |Â #:sourceÂ metafunctionÂ size-exprÂ kw-args
                      Â Â |Â #:sourceÂ metafunction
                      Â Â Â Â Â 
from-reduction-relationÂ =Â #:sourceÂ reduction-relation-expr
                          size-exprÂ kw-argsÂ ...
                      Â Â |Â #:sourceÂ reduction-relation-expr
                      Â Â Â Â Â 
                kw-argsÂ =Â #:attempt-numÂ attempts-expr
                      Â Â |Â #:retriesÂ retries-expr
Â 
Â Â size-exprÂ :Â natural-number/c
Â Â attempt-num-exprÂ :Â natural-number/c
Â Â retries-exprÂ :Â natural-number/c
è¯­æ³•
(redex-enumÂ languageÂ pattern)
è¯­æ³•
(redex-indexÂ languageÂ patternÂ term)
è¯­æ³•
(redex-checkÂ templateÂ property-exprÂ kw-argÂ ...)
Â 
templateÂ =Â languageÂ pattern
       Â Â |Â languageÂ patternÂ #:ad-hoc
       Â Â |Â languageÂ patternÂ #:in-order
       Â Â |Â languageÂ patternÂ #:uniform-at-randomÂ p-value
       Â Â |Â languageÂ patternÂ #:enumÂ bound
       Â Â |Â languageÂ #:satisfying
           (judgment-form-idÂ patternÂ ...)
       Â Â |Â languageÂ #:satisfying
           (metafunction-idÂ patternÂ ...)Â =Â pattern
       Â Â Â Â Â 
  kw-argÂ =Â #:attemptsÂ attempts-expr
       Â Â |Â #:sourceÂ metafunction
       Â Â |Â #:sourceÂ relation-expr
       Â Â |Â #:retriesÂ retries-expr
       Â Â |Â #:print?Â print?-expr
       Â Â |Â #:attempt-sizeÂ attempt-size-expr
       Â Â |Â #:prepareÂ prepare-expr
       Â Â |Â #:keep-going?Â keep-going?-expr
Â 
Â Â property-exprÂ :Â any/c
Â Â attempts-exprÂ :Â natural-number/c
Â Â relation-exprÂ :Â reduction-relation?
Â Â retries-exprÂ :Â natural-number/c
Â Â print?-exprÂ :Â any/c
Â Â attempt-size-exprÂ :Â (->Â natural-number/cÂ natural-number/c)
Â Â prepare-exprÂ :Â (->Â any/cÂ any/c)
parameter
(depth-dependent-order?)Â ->Â (or/cÂ boolean?Â 'random)
(depth-dependent-order?Â depth-dependent)Â ->Â void?
Â Â depth-dependentÂ :Â (or/cÂ boolean?Â 'random)
Â =Â 'random
è¯­æ³•
(redex-generatorÂ language-idÂ satisfyingÂ size-expr)
Â 
satisfyingÂ =Â (judgment-form-idÂ patternÂ ...)
         Â Â |Â (metafunction-idÂ patternÂ ...)Â =Â pattern
Â 
Â Â size-exprÂ :Â natural-number/c
struct
(structÂ counterexampleÂ (term)
Â Â Â Â #:extra-constructor-nameÂ make-counterexample
Â Â Â Â #:transparent)
Â Â termÂ :Â any/c
struct
(structÂ exn:fail:redex:testÂ exn:fail:redexÂ (source term)
Â Â Â Â #:extra-constructor-nameÂ make-exn:fail:redex:test)
Â Â sourceÂ :Â exn:fail?
Â Â termÂ :Â any/c
è¯­æ³•
(check-reduction-relationÂ relationÂ propertyÂ kw-argsÂ ...)
Â 
kw-argÂ =Â #:attemptsÂ attempts-expr
     Â Â |Â #:retriesÂ retries-expr
     Â Â |Â #:print?Â print?-expr
     Â Â |Â #:attempt-sizeÂ attempt-size-expr
     Â Â |Â #:prepareÂ prepare-expr
Â 
Â Â propertyÂ :Â (->Â any/cÂ any/c)
Â Â attempts-exprÂ :Â natural-number/c
Â Â retries-exprÂ :Â natural-number/c
Â Â print?-exprÂ :Â any/c
Â Â attempt-size-exprÂ :Â (->Â natural-number/cÂ natural-number/c)
Â Â prepare-exprÂ :Â (->Â any/cÂ any/c)
è¯­æ³•
(check-metafunctionÂ metafunctionÂ propertyÂ kw-argsÂ ...)
Â 
kw-argÂ =Â #:attemptsÂ attempts-expr
     Â Â |Â #:retriesÂ retries-expr
     Â Â |Â #:print?Â print?-expr
     Â Â |Â #:attempt-sizeÂ attempt-size-expr
     Â Â |Â #:prepareÂ prepare-expr
Â 
Â Â propertyÂ :Â (->Â (listofÂ any/c)Â any/c)
Â Â attempts-exprÂ :Â natural-number/c
Â Â retries-exprÂ :Â natural-number/c
Â Â print?-exprÂ :Â any/c
Â Â attempt-size-exprÂ :Â (->Â natural-number/cÂ natural-number/c)
Â Â prepare-exprÂ :Â (->Â (listofÂ any/c)Â (listofÂ any/c))
å‡½æ•°
(default-attempt-sizeÂ n)Â ->Â natural-number/c
Â Â nÂ :Â natural-number/c
parameter
(default-check-attempts)Â ->Â natural-number/c
(default-check-attemptsÂ attempts)Â ->Â void?
Â Â attemptsÂ :Â natural-number/c
parameter
(redex-pseudo-random-generator)Â ->Â pseudo-random-generator?
(redex-pseudo-random-generatorÂ generator)Â ->Â void?
Â Â generatorÂ :Â pseudo-random-generator?
å‡½æ•°
(exn:fail:redex:generation-failure?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
å‡½æ•°
(tracesÂ  reductions                                       Â 
Â       Â  expr                                             Â 
Â       Â [#:multiple?Â multiple?                            Â 
Â       Â  #:reduceÂ reduce                                  Â 
Â       Â  #:predÂ pred                                      Â 
Â       Â  #:ppÂ pp                                          Â 
Â       Â  #:colorsÂ colors                                  Â 
Â       Â  #:racket-colors?Â racket-colors?                  Â 
Â       Â  #:scheme-colors?Â scheme-colors?                  Â 
Â       Â  #:filterÂ term-filter                             Â 
Â       Â  #:x-spacingÂ x-spacing                            Â 
Â       Â  #:y-spacingÂ y-spacing                            Â 
Â       Â  #:layoutÂ layout                                  Â 
Â       Â  #:edge-labels?Â edge-labels?                      Â 
Â       Â  #:edge-label-fontÂ edge-label-font                Â 
Â       Â  #:graph-pasteboard-mixinÂ graph-pasteboard-mixin])Â 
Â ->Â void?
Â Â reductionsÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â exprÂ :Â (or/cÂ any/cÂ (listofÂ any/c))
Â Â multiple?Â :Â boolean?Â =Â #f
Â Â reduceÂ :Â (->Â reduction-relation?Â any/c
           Â Â Â Â (listofÂ (list/cÂ (unionÂ false/cÂ string?)Â any/c)))
Â  Â      Â =Â apply-reduction-relation/tag-with-names
Â Â predÂ :Â (or/cÂ (->Â sexpÂ any)            Â =Â (Î»Â (x)Â #t)
         Â Â Â Â Â Â (->Â sexpÂ term-node?Â any))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â colorsÂ :Â (listof
           Â (cons/cÂ string?
           Â Â Â Â Â Â Â Â Â (and/cÂ (listofÂ (or/cÂ string?Â (is-a?/cÂ color%)))
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (Î»Â (x)Â (<=Â 0Â (lengthÂ x)Â 6)))))
Â  Â      Â =Â '()
Â Â racket-colors?Â :Â boolean?Â =Â #t
Â Â scheme-colors?Â :Â boolean?Â =Â racket-colors?
Â Â term-filterÂ :Â (->Â any/cÂ (or/cÂ #fÂ string?)Â any/c)
Â  Â           Â =Â (Î»Â (xÂ y)Â #t)
Â Â x-spacingÂ :Â real?Â =Â 15
Â Â y-spacingÂ :Â real?Â =Â 15
Â Â layoutÂ :Â (->Â (listofÂ term-node?)Â void?)Â =Â void
Â Â edge-labels?Â :Â boolean?Â =Â #t
Â Â edge-label-fontÂ :Â (or/cÂ #fÂ (is-a?/cÂ font%))Â =Â #f
Â Â graph-pasteboard-mixinÂ :Â (make-mixin-contractÂ graph-pasteboard<%>)
Â  Â                      Â =Â values
å‡½æ•°
(traces/psÂ  reductions                                      Â 
Â          Â  expr                                            Â 
Â          Â  file                                            Â 
Â          Â [#:multiple?Â multiple?                           Â 
Â          Â  #:reduceÂ reduce                                 Â 
Â          Â  #:predÂ pred                                     Â 
Â          Â  #:ppÂ pp                                         Â 
Â          Â  #:colorsÂ colors                                 Â 
Â          Â  #:filterÂ term-filter                            Â 
Â          Â  #:layoutÂ layout                                 Â 
Â          Â  #:x-spacingÂ x-spacing                           Â 
Â          Â  #:y-spacingÂ y-spacing                           Â 
Â          Â  #:edge-labels?Â edge-labels?                     Â 
Â          Â  #:edge-label-fontÂ edge-label-font               Â 
Â          Â  #:graph-pasteboard-mixinÂ graph-pasteboard-mixin]Â 
Â          Â  #:post-processÂ post-process)                    Â 
Â ->Â void?
Â Â reductionsÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â exprÂ :Â (or/cÂ any/cÂ (listofÂ any/c))
Â Â fileÂ :Â (or/cÂ path-string?Â path?)
Â Â multiple?Â :Â boolean?Â =Â #f
Â Â reduceÂ :Â (->Â reduction-relation?Â any/c
           Â Â Â Â (listofÂ (list/cÂ (unionÂ false/cÂ string?)Â any/c)))
Â  Â      Â =Â apply-reduction-relation/tag-with-names
Â Â predÂ :Â (or/cÂ (->Â sexpÂ any)            Â =Â (Î»Â (x)Â #t)
         Â Â Â Â Â Â (->Â sexpÂ term-node?Â any))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â colorsÂ :Â (listof
           Â (cons/cÂ string?
           Â Â Â Â Â Â Â Â Â (and/cÂ (listofÂ (or/cÂ string?Â (is-a?/cÂ color%)))
           Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â (Î»Â (x)Â (<=Â 0Â (lengthÂ x)Â 6)))))
Â  Â      Â =Â '()
Â Â term-filterÂ :Â (->Â any/cÂ (or/cÂ #fÂ string?)Â any/c)
Â  Â           Â =Â (Î»Â (xÂ y)Â #t)
Â Â layoutÂ :Â (->Â (listofÂ term-node?)Â void?)Â =Â void
Â Â x-spacingÂ :Â number?Â =Â 15
Â Â y-spacingÂ :Â number?Â =Â 15
Â Â edge-labels?Â :Â boolean?Â =Â #t
Â Â edge-label-fontÂ :Â (or/cÂ #fÂ (is-a?/cÂ font%))Â =Â #f
Â Â graph-pasteboard-mixinÂ :Â (make-mixin-contractÂ graph-pasteboard<%>)
Â  Â                      Â =Â values
Â Â post-processÂ :Â (->Â (is-a?/cÂ graph-pasteboard<%>)Â any/c)
å‡½æ•°
(stepperÂ reductionsÂ tÂ [pp])Â ->Â void?
Â Â reductionsÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â tÂ :Â any/c
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
å‡½æ•°
(stepper/seedÂ reductionsÂ seedÂ [pp])Â ->Â void?
Â Â reductionsÂ :Â (or/cÂ reduction-relation?Â IO-judgment-form?)
Â Â seedÂ :Â (cons/cÂ any/cÂ (listofÂ any/c))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
å‡½æ•°
(show-derivationsÂ  derivations                        Â Â  Â Â 
Â                 Â [#:ppÂ pp                            Â Â  Â Â 
Â                 Â  #:racket-colors?Â racket-colors?    Â Â  Â Â 
Â                 Â  #:init-derivationÂ init-derivation])Â ->Â any
Â Â derivationsÂ :Â (cons/cÂ derivation?Â (listofÂ derivation?))
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â racket-colors?Â :Â boolean?Â =Â #f
Â Â init-derivationÂ :Â exact-nonnegative-integer?Â =Â 0
å‡½æ•°
(derivation/psÂ  derivation                      Â Â  Â Â 
Â              Â  filename                        Â Â  Â Â 
Â              Â [#:ppÂ pp                         Â Â  Â Â 
Â              Â  #:racket-colors?Â racket-colors?]Â Â  Â Â 
Â              Â  #:post-processÂ post-process)    Â ->Â void?
Â Â derivationÂ :Â derivation?
Â Â filenameÂ :Â path-string?
Â Â ppÂ :Â (or/cÂ (anyÂ ->Â string)
       Â Â Â Â Â Â (anyÂ output-portÂ numberÂ (is-a?/cÂ text%)Â ->Â void))
Â  Â  Â =Â default-pretty-printer
Â Â racket-colors?Â :Â boolean?Â =Â #f
Â Â post-processÂ :Â (->Â (is-a?/cÂ pasteboard%)Â any)
å‡½æ•°
(term-node-childrenÂ tn)Â ->Â (listofÂ term-node?)
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-parentsÂ tn)Â ->Â (listofÂ term-node?)
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-labelsÂ tn)Â ->Â (listofÂ (or/cÂ false/cÂ string?))
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-set-color!Â tnÂ color)Â ->Â void?
Â Â tnÂ :Â term-node?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color%)Â false/c)
å‡½æ•°
(term-node-colorÂ tn)Â ->Â (or/cÂ string?Â (is-a?/cÂ color%)Â false/c)
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-set-red!Â tnÂ red?)Â ->Â void?
Â Â tnÂ :Â term-node?
Â Â red?Â :Â boolean?
å‡½æ•°
(term-node-exprÂ tn)Â ->Â any
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-set-position!Â tnÂ xÂ y)Â ->Â void?
Â Â tnÂ :Â term-node?
Â Â xÂ :Â (and/cÂ real?Â positive?)
Â Â yÂ :Â (and/cÂ real?Â positive?)
å‡½æ•°
(term-node-xÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-yÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-widthÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node-heightÂ tn)Â ->Â real?
Â Â tnÂ :Â term-node?
å‡½æ•°
(term-node?Â v)Â ->Â boolean?
Â Â vÂ :Â any/c
parameter
(reduction-steps-cutoff)Â ->Â number?
(reduction-steps-cutoffÂ cutoff)Â ->Â void?
Â Â cutoffÂ :Â number?
parameter
(initial-font-size)Â ->Â number?
(initial-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â number?
parameter
(initial-char-width)Â ->Â (or/cÂ number?Â (->Â any/cÂ number?))
(initial-char-widthÂ width)Â ->Â void?
Â Â widthÂ :Â (or/cÂ number?Â (->Â any/cÂ number?))
parameter
(dark-pen-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(dark-pen-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(dark-brush-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(dark-brush-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(light-pen-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(light-pen-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(light-brush-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(light-brush-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(dark-text-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(dark-text-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(light-text-color)Â ->Â (or/cÂ string?Â (is-a?/cÂ color<%>))
(light-text-colorÂ color)Â ->Â void?
Â Â colorÂ :Â (or/cÂ string?Â (is-a?/cÂ color<%>))
parameter
(pretty-print-parameters)Â ->Â (->Â (->Â any/c)Â any/c)
(pretty-print-parametersÂ f)Â ->Â void?
Â Â fÂ :Â (->Â (->Â any/c)Â any/c)
å‡½æ•°
(default-pretty-printerÂ vÂ portÂ widthÂ text)Â ->Â void?
Â Â vÂ :Â any/c
Â Â portÂ :Â output-port?
Â Â widthÂ :Â exact-nonnegative-integer?
Â Â textÂ :Â (is-a?/cÂ text%)
è¯­æ³•
(render-termÂ langÂ term)
(render-termÂ langÂ termÂ file)
è¯­æ³•
(term->pictÂ langÂ term)
å‡½æ•°
(render-term/pretty-writeÂ  lang           Â Â  Â Â 
Â                         Â  term           Â Â  Â Â 
Â                         Â [filename       Â Â  Â Â 
Â                         Â  #:widthÂ width])Â ->Â (or/cÂ void?Â pict?)
Â Â langÂ :Â compiled-lang?
Â Â termÂ :Â any/c
Â Â filenameÂ :Â (or/cÂ path-string?Â #f)Â =Â #f
Â Â widthÂ :Â (or/cÂ exact-positive-integer?Â 'infinity)
Â  Â     Â =Â (pretty-print-columns)
å‡½æ•°
(term->pict/pretty-writeÂ  lang           Â Â  Â Â 
Â                        Â  term           Â Â  Â Â 
Â                        Â [#:widthÂ width])Â ->Â pict?
Â Â langÂ :Â compiled-lang?
Â Â termÂ :Â any/c
Â Â widthÂ :Â (or/cÂ exact-positive-integer?Â 'infinity)
Â  Â     Â =Â (pretty-print-columns)
å‡½æ•°
(render-languageÂ langÂ [fileÂ #:ntsÂ nts])Â ->Â (ifÂ fileÂ void?Â pict?)
Â Â langÂ :Â compiled-lang?
Â Â fileÂ :Â (or/cÂ false/cÂ path-string?)Â =Â #f
Â Â ntsÂ :Â (or/cÂ false/cÂ (listofÂ (or/cÂ string?Â symbol?)))
Â  Â   Â =Â (render-language-nts)
å‡½æ•°
(language->pictÂ langÂ [#:ntsÂ nts])Â ->Â pict?
Â Â langÂ :Â compiled-lang?
Â Â ntsÂ :Â (or/cÂ false/cÂ (listofÂ (or/cÂ string?Â symbol?)))
Â  Â   Â =Â (render-language-nts)
å‡½æ•°
(render-reduction-relationÂ  rel            Â 
Â                          Â [file           Â 
Â                          Â  #:styleÂ style])Â 
Â ->Â (ifÂ fileÂ void?Â pict?)
Â Â relÂ :Â reduction-relation?
Â Â fileÂ :Â (or/cÂ false/cÂ path-string?)Â =Â #f
Â Â styleÂ :Â reduction-rule-style/cÂ =Â (rule-pict-style)
å‡½æ•°
(reduction-relation->pictÂ rÂ [#:styleÂ style])Â ->Â pict?
Â Â rÂ :Â reduction-relation?
Â Â styleÂ :Â reduction-rule-style/cÂ =Â (rule-pict-style)
è¯­æ³•
(render-metafunctionÂ metafunction-nameÂ maybe-contract)
(render-metafunctionÂ metafunction-nameÂ filenameÂ maybe-contract)
è¯­æ³•
(render-metafunctionsÂ metafunction-nameÂ ...
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â maybe-filenameÂ maybe-contract)
Â 
 maybe-filenameÂ =Â 
              Â Â |Â #:fileÂ filename
              Â Â |Â #:filenameÂ filename
              Â Â Â Â Â 
maybe-contract?Â =Â 
              Â Â |Â #:contract?Â bool-expr
è¯­æ³•
(metafunction->pictÂ metafunction-nameÂ maybe-contract?)
è¯­æ³•
(metafunctions->pictÂ metafunction-nameÂ ...)
è¯­æ³•
(render-relationÂ relation-name)
è¯­æ³•
(render-relationÂ relation-nameÂ filename)
è¯­æ³•
(render-judgment-formÂ judgment-form-name)
è¯­æ³•
(render-judgment-formÂ judgment-form-nameÂ filename)
è¯­æ³•
(relation->pictÂ relation-name)
è¯­æ³•
(judgment-form->pictÂ judgment-form-name)
parameter
(render-language-nts)Â ->Â (or/cÂ false/cÂ (listofÂ symbol?))
(render-language-ntsÂ nts)Â ->Â void?
Â Â ntsÂ :Â (or/cÂ false/cÂ (listofÂ symbol?))
parameter
(non-terminal-gap-space)Â ->Â real?
(non-terminal-gap-spaceÂ gap-space)Â ->Â void?
Â Â gap-spaceÂ :Â real?
parameter
(extend-language-show-union)Â ->Â boolean?
(extend-language-show-unionÂ show?)Â ->Â void?
Â Â show?Â :Â boolean?
parameter
(extend-language-show-extended-order)Â ->Â boolean?
(extend-language-show-extended-orderÂ ext-order?)Â ->Â void?
Â Â ext-order?Â :Â boolean?
parameter
(render-reduction-relation-rules)
Â ->Â (or/cÂ false/c
    Â Â Â Â Â Â (listofÂ (or/cÂ symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))
(render-reduction-relation-rulesÂ rules)Â ->Â void?
Â Â rulesÂ :Â (or/cÂ false/c
          Â Â Â Â Â Â (listofÂ (or/cÂ symbol?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))
parameter
(rule-pict-style)Â ->Â reduction-rule-style/c
(rule-pict-styleÂ style)Â ->Â void?
Â Â styleÂ :Â reduction-rule-style/c
å€¼
reduction-rule-style/cÂ :Â contract?
å‡½æ•°
(rule-pict-info?Â x)Â ->Â boolean?
Â Â xÂ :Â any/c
å‡½æ•°
(rule-pict-info-arrowÂ rule-pict-info)Â ->Â symbol?
Â Â rule-pict-infoÂ :Â rule-pict-info?
å‡½æ•°
(rule-pict-info-lhsÂ rule-pict-info)Â ->Â pict?
Â Â rule-pict-infoÂ :Â rule-pict-info?
å‡½æ•°
(rule-pict-info-rhsÂ rule-pict-info)Â ->Â pict?
Â Â rule-pict-infoÂ :Â rule-pict-info?
å‡½æ•°
(rule-pict-info-labelÂ rule-pict-info)Â ->Â (or/cÂ symbol?Â #f)
Â Â rule-pict-infoÂ :Â rule-pict-info?
å‡½æ•°
(rule-pict-info-computed-labelÂ rule-pict-info)
Â ->Â (or/cÂ pict?Â #f)
Â Â rule-pict-infoÂ :Â rule-pict-info?
å‡½æ•°
(rule-pict-info->side-condition-pictÂ  rule-pict-infoÂ Â  Â Â 
Â                                    Â [max-width])   Â ->Â pict?
Â Â rule-pict-infoÂ :Â rule-pict-info?
Â Â max-widthÂ :Â real?Â =Â +inf.0
parameter
(arrow-space)Â ->Â natural-number/c
(arrow-spaceÂ space)Â ->Â void?
Â Â spaceÂ :Â natural-number/c
parameter
(label-space)Â ->Â natural-number/c
(label-spaceÂ space)Â ->Â void?
Â Â spaceÂ :Â natural-number/c
parameter
(metafunction-pict-style)
Â ->Â (or/cÂ 'left-right
    Â Â Â Â Â Â 'up-down
    Â Â Â Â Â Â 'left-right/vertical-side-conditions
    Â Â Â Â Â Â 'up-down/vertical-side-conditions
    Â Â Â Â Â Â 'left-right/compact-side-conditions
    Â Â Â Â Â Â 'up-down/compact-side-conditions
    Â Â Â Â Â Â 'left-right/beside-side-conditions)
(metafunction-pict-styleÂ style)Â ->Â void?
Â Â styleÂ :Â (or/cÂ 'left-right
          Â Â Â Â Â Â 'up-down
          Â Â Â Â Â Â 'left-right/vertical-side-conditions
          Â Â Â Â Â Â 'up-down/vertical-side-conditions
          Â Â Â Â Â Â 'left-right/compact-side-conditions
          Â Â Â Â Â Â 'up-down/compact-side-conditions
          Â Â Â Â Â Â 'left-right/beside-side-conditions)
parameter
(metafunction-up/down-indent)Â ->Â (>=/cÂ 0)
(metafunction-up/down-indentÂ indent)Â ->Â void?
Â Â indentÂ :Â (>=/cÂ 0)
parameter
(delimit-ellipsis-arguments?)Â ->Â any/c
(delimit-ellipsis-arguments?Â delimit?)Â ->Â void?
Â Â delimit?Â :Â any/c
parameter
(white-square-bracket)Â ->Â (->Â boolean?Â pict?)
(white-square-bracketÂ make-white-square-bracket)Â ->Â void?
Â Â make-white-square-bracketÂ :Â (->Â boolean?Â pict?)
å‡½æ•°
(homemade-white-square-bracketÂ open?)Â ->Â pict?
Â Â open?Â :Â boolean?
å‡½æ•°
(default-white-square-bracketÂ open?)Â ->Â pict?
Â Â open?Â :Â boolean?
parameter
(linebreaks)Â ->Â (or/cÂ #fÂ (listofÂ boolean?))
(linebreaksÂ breaks)Â ->Â void?
Â Â breaksÂ :Â (or/cÂ #fÂ (listofÂ boolean?))
parameter
(sc-linebreaks)Â ->Â (or/cÂ #fÂ (listofÂ boolean?))
(sc-linebreaksÂ breaks)Â ->Â void?
Â Â breaksÂ :Â (or/cÂ #fÂ (listofÂ boolean?))
parameter
(metafunction-cases)
Â ->Â (or/cÂ #fÂ (and/cÂ (listofÂ (or/cÂ symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?))
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â pair?))
(metafunction-casesÂ cases)Â ->Â void?
Â Â casesÂ :Â (or/cÂ #fÂ (and/cÂ (listofÂ (or/cÂ symbol?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?))
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â pair?))
parameter
(judgment-form-cases)
Â ->Â (or/cÂ #f
    Â Â Â Â Â Â (non-empty-listofÂ (or/cÂ symbol?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
    Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))
(judgment-form-casesÂ cases)Â ->Â void?
Â Â casesÂ :Â (or/cÂ #f
          Â Â Â Â Â Â (non-empty-listofÂ (or/cÂ symbol?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string?
          Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â exact-nonnegative-integer?)))
parameter
(judgment-form-show-rule-names)Â ->Â boolean?
(judgment-form-show-rule-namesÂ show-rule-names?)Â ->Â void?
Â Â show-rule-names?Â :Â boolean?
parameter
(label-style)Â ->Â text-style/c
(label-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(grammar-style)Â ->Â text-style/c
(grammar-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(paren-style)Â ->Â text-style/c
(paren-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(literal-style)Â ->Â text-style/c
(literal-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(metafunction-style)Â ->Â text-style/c
(metafunction-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(non-terminal-style)Â ->Â text-style/c
(non-terminal-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(non-terminal-subscript-style)Â ->Â text-style/c
(non-terminal-subscript-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(non-terminal-superscript-style)Â ->Â text-style/c
(non-terminal-superscript-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(default-style)Â ->Â text-style/c
(default-styleÂ style)Â ->Â void?
Â Â styleÂ :Â text-style/c
parameter
(label-font-size)Â ->Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
(label-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
parameter
(metafunction-font-size)Â ->Â (and/cÂ (between/cÂ 1Â 255)
                            Â Â Â Â Â Â Â integer?)
(metafunction-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â (and/cÂ (between/cÂ 1Â 255)
         Â Â Â Â Â Â Â integer?)
parameter
(default-font-size)Â ->Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
(default-font-sizeÂ size)Â ->Â void?
Â Â sizeÂ :Â (and/cÂ (between/cÂ 1Â 255)Â integer?)
parameter
(reduction-relation-rule-separation)Â ->Â (parameter/cÂ real?)
(reduction-relation-rule-separationÂ sep)Â ->Â void?
Â Â sepÂ :Â (parameter/cÂ real?)
parameter
(reduction-relation-rule-extra-separation)
Â ->Â (parameter/cÂ real?)
(reduction-relation-rule-extra-separationÂ sep)Â ->Â void?
Â Â sepÂ :Â (parameter/cÂ real?)
parameter
(reduction-relation-rule-line-separation)
Â ->Â (parameter/cÂ real?)
(reduction-relation-rule-line-separationÂ sep)Â ->Â void?
Â Â sepÂ :Â (parameter/cÂ real?)
parameter
(curly-quotes-for-strings)Â ->Â boolean?
(curly-quotes-for-stringsÂ on?)Â ->Â void?
Â Â on?Â :Â boolean?
parameter
(current-text)Â ->Â (->Â string?Â text-style/cÂ number?Â pict?)
(current-textÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â string?Â text-style/cÂ number?Â pict?)
å‡½æ•°
(arrow->pictÂ arrow)Â ->Â pict?
Â Â arrowÂ :Â symbol?
å‡½æ•°
(set-arrow-pict!Â arrowÂ proc)Â ->Â void?
Â Â arrowÂ :Â symbol?
Â Â procÂ :Â (->Â pict?)
parameter
(white-bracket-sizing)
Â ->Â (->Â string?Â number?Â (valuesÂ number?Â number?Â number?Â number?))
(white-bracket-sizingÂ proc)Â ->Â void?
Â Â procÂ :Â (->Â string?Â number?Â (valuesÂ number?Â number?Â number?Â number?))
parameter
(horizontal-bar-spacing)
Â ->Â (parameter/cÂ exact-nonnegative-integer?)
(horizontal-bar-spacingÂ space)Â ->Â void?
Â Â spaceÂ :Â (parameter/cÂ exact-nonnegative-integer?)
parameter
(metafunction-gap-space)Â ->Â real?
(metafunction-gap-spaceÂ gap-space)Â ->Â void?
Â Â gap-spaceÂ :Â real?
parameter
(metafunction-rule-gap-space)Â ->Â real?
(metafunction-rule-gap-spaceÂ gap-space)Â ->Â void?
Â Â gap-spaceÂ :Â real?
parameter
(metafunction-line-gap-space)Â ->Â real?
(metafunction-line-gap-spaceÂ gap-space)Â ->Â void?
Â Â gap-spaceÂ :Â real?
parameter
(metafunction-fill-acceptable-width)Â ->Â real?
(metafunction-fill-acceptable-widthÂ width)Â ->Â void?
Â Â widthÂ :Â real?
parameter
(metafunction-combine-contract-and-rules)
Â ->Â (pict?Â pict?Â . -> .Â pict?)
(metafunction-combine-contract-and-rulesÂ combine)Â ->Â void?
Â Â combineÂ :Â (pict?Â pict?Â . -> .Â pict?)
parameter
(relation-clauses-combine)
Â ->Â (parameter/cÂ (->Â (listofÂ pict?)Â pict?))
(relation-clauses-combineÂ combine)Â ->Â void?
Â Â combineÂ :Â (parameter/cÂ (->Â (listofÂ pict?)Â pict?))
parameter
(metafunction-arrow-pict)Â ->Â (parameter/cÂ (->Â pict?))
(metafunction-arrow-pictÂ make-arrow)Â ->Â void?
Â Â make-arrowÂ :Â (parameter/cÂ (->Â pict?))
parameter
(where-make-prefix-pict)Â ->Â (parameter/cÂ (->Â pict?))
(where-make-prefix-pictÂ make-prefix)Â ->Â void?
Â Â make-prefixÂ :Â (parameter/cÂ (->Â pict?))
parameter
(where-combine)Â ->Â (parameter/cÂ (->Â pict?Â pict?Â pict?))
(where-combineÂ combine)Â ->Â void?
Â Â combineÂ :Â (parameter/cÂ (->Â pict?Â pict?Â pict?))
parameter
(current-render-pict-adjust)Â ->Â (pict?Â symbol?Â . -> .Â pict?)
(current-render-pict-adjustÂ adjust)Â ->Â void?
Â Â adjustÂ :Â (pict?Â symbol?Â . -> .Â pict?)
è¯­æ³•
(with-unquote-rewriterÂ procÂ expression)
è¯­æ³•
(with-atomic-rewriterÂ name-symbol
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â string-or-thunk-returning-pict
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
è¯­æ³•
(with-atomic-rewritersÂ ([name-symbolÂ string-or-thunk-returning-pict]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
è¯­æ³•
(with-compound-rewriterÂ name-symbol
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â proc
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
è¯­æ³•
(with-compound-rewritersÂ ([name-symbolÂ proc]Â ...)
Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â Â expression)
struct
(structÂ lwÂ (e
Â       Â Â  Â  line
Â       Â Â  Â  line-span
Â       Â Â  Â  column
Â       Â Â  Â  column-span
Â       Â Â  Â  unq?
Â       Â Â  Â  metafunction?)
Â Â Â Â #:extra-constructor-nameÂ make-lw
Â Â Â Â #:mutable)
Â Â eÂ :Â (or/cÂ string?
      Â Â Â Â Â Â symbol?
      Â Â Â Â Â Â pict?
      Â Â Â Â Â Â (listofÂ (or/cÂ (symbolsÂ 'spring)Â lw?)))
Â Â lineÂ :Â exact-positive-integer?
Â Â line-spanÂ :Â exact-positive-integer?
Â Â columnÂ :Â exact-positive-integer?
Â Â column-spanÂ :Â exact-positive-integer?
Â Â unq?Â :Â boolean?
Â Â metafunction?Â :Â boolean?
å‡½æ•°
(build-lwÂ eÂ lineÂ line-spanÂ columnÂ column-span)Â ->Â lw?
Â Â eÂ :Â (or/cÂ string?
      Â Â Â Â Â Â symbol?
      Â Â Â Â Â Â pict?
      Â Â Â Â Â Â (listofÂ (or/cÂ 'springÂ lw?)))
Â Â lineÂ :Â exact-positive-integer?
Â Â line-spanÂ :Â exact-positive-integer?
Â Â columnÂ :Â exact-positive-integer?
Â Â column-spanÂ :Â exact-positive-integer?
è¯­æ³•
(to-lwÂ arg)
å‡½æ•°
(to-lw/stxÂ stx)Â ->Â lw?
Â Â stxÂ :Â syntax?
å‡½æ•°
(render-lwÂ language/ntsÂ lw)Â ->Â pict?
Â Â language/ntsÂ :Â (or/cÂ (listofÂ symbol?)Â compiled-lang?)
Â Â lwÂ :Â lw?
å‡½æ•°
(lw->pictÂ language/ntwÂ lw)Â ->Â pict?
Â Â language/ntwÂ :Â (or/cÂ (listofÂ symbol?)Â compiled-lang?)
Â Â lwÂ :Â lw?
å‡½æ•°
(just-beforeÂ stuffÂ lw)Â ->Â lw?
Â Â stuffÂ :Â (or/cÂ pict?Â string?Â symbol?)
Â Â lwÂ :Â lw?
å‡½æ•°
(just-afterÂ stuffÂ lw)Â ->Â lw?
Â Â stuffÂ :Â (or/cÂ pict?Â string?Â symbol?)
Â Â lwÂ :Â lw?
å‡½æ•°
(fill-betweenÂ stuffÂ lw-beforeÂ lw-after)Â ->Â lw?
Â Â stuffÂ :Â (or/cÂ pict?Â string?Â symbol?)
Â Â lw-beforeÂ :Â lw?
Â Â lw-afterÂ :Â lw?
è¯­æ³•
(define-rewriteÂ idÂ fromÂ ==>Â to
Â Â [#:contextÂ (context-idÂ ...)
Â Â Â #:variablesÂ (variable-idÂ ...)
Â Â Â #:once-only
Â Â Â #:exactly-once])
è¯­æ³•
(define-rewrite/composeÂ idÂ rw-idÂ ...)
è¯­æ³•
(include/rewriteÂ path-specÂ mod-idÂ rw-idÂ ...)
å‡½æ•°
(run-gen-and-checkÂ  get-gen      Â Â  Â Â 
Â                  Â  check        Â Â  Â Â 
Â                  Â  seconds      Â Â  Â Â 
Â                  Â [#:nameÂ name  Â Â  Â Â 
Â                  Â  #:typeÂ type])Â ->Â run-results?
Â Â get-genÂ :Â (->Â (->Â any/c))
Â Â checkÂ :Â (->Â any/cÂ boolean?)
Â Â secondsÂ :Â natural-number/c
Â Â nameÂ :Â string?Â =Â "unknown"
Â Â typeÂ :Â symbol?Â =Â 'unknown
struct
(struct run-results (tries time cexps))
Â Â triesÂ :Â natural-number/c
Â Â timeÂ :Â natural-number/c
Â Â cexpsÂ :Â natural-number/c
å‡½æ•°
(run-gen-and-check/modsÂ  gen-mod-path  Â Â  Â Â 
Â                       Â  check-mod-pathÂ Â  Â Â 
Â                       Â  seconds       Â Â  Â Â 
Â                       Â [#:nameÂ name]) Â ->Â run-results?
Â Â gen-mod-pathÂ :Â module-path?
Â Â check-mod-pathÂ :Â module-path?
Â Â secondsÂ :Â natural-number/c
Â Â nameÂ :Â string?Â =Â "unknown"
struct
(struct bmark-log-data (data))
Â Â dataÂ :Â any/c
å‡½æ•°
(benchmark-logging-toÂ filenameÂ thunk)Â ->Â any/c
Â Â filenameÂ :Â string?
Â Â thunkÂ :Â (->Â any/c)
parameter
(bmark-log-directory)
Â ->Â (or/cÂ path-string?Â path-for-some-system?Â 'upÂ 'same)
(bmark-log-directoryÂ directory)Â ->Â void?
Â Â directoryÂ :Â (or/cÂ path-string?Â path-for-some-system?Â 'upÂ 'same)
Â =Â (current-directory)
å‡½æ•°
(all-mods)
Â ->Â (listofÂ (list/cÂ string?Â module-path?Â module-path?))
